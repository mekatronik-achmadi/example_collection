import numpy as np

class DataAll:
	def __init__(self):
		self.all_data()
		
		matChlor = self.dataAll[:,4]
		matLuminos = self.dataAll[:,3]
		matRed = self.dataAll[:,2]
		matGreen = self.dataAll[:,1]
		matBlue = self.dataAll[:,0]
		
		#self.maxChlor = matChlor.max()
		#self.maxLuminos = matLuminos.max()
		
		#self.dataRed = matRed/matRed.max()
		#self.dataGreen = matGreen/matGreen.max()
		#self.dataBlue = matBlue/matBlue.max()
		#self.dataLuminos = matLuminos/matLuminos.max()
		#self.dataChlor = matChlor/self.maxChlor
		
		self.dataRed = matRed
		self.dataGreen = matGreen
		self.dataBlue = matBlue
		self.dataLuminos = matLuminos
		self.dataChlor = matChlor
		
		self.dim = np.shape(self.dataChlor)[0]
		self.idx = np.arange(0,self.dim,1)
		
	def all_data(self):
		self.dataAll = np.array([
			[47,129,108,118.43,2693.18],
			[81,118,108,113.40,3676.52],
			[55,121,108,113.44,3693.84],
			[99,108,103,105.93,5204.84],
			[51,123,108,114.97,3925.74],
			[58,124,110,116.46,3436.18],
			[74,117,106,111.69,4325.74],
			[80,100,90,96.50,2185.04],
			[62,123,110,115.90,2343.44],
			[58,116,106,110.15,1519.06]
		])
#		self.dataAll = np.array([
#			[46.6,128.4,107,118.18,3.07058],
#			[46.4,128.4,107.8,118.334,3.07058],
#			[47.4,128.6,108.6,118.716,3.07058],
#			[46.8,129.4,108,119.124,3.07058],
#			[46.6,128.2,108.2,118.288,3.07058],
#			[47.2,128,107.8,118.102,3.07058],
#			[46.2,128.8,107.4,118.524,3.07058],
#			[46.4,128.8,108,118.664,3.07058],
#			[46.6,128.2,107.2,118.078,3.07058],
#			[46.8,128.4,107.6,118.32,3.07058],
#			[76,117.2,106.4,112.048,4.19372],
#			[76.8,117.2,106.2,112.062,4.19372],
#			[78.6,119,108,113.862,4.19372],
#			[78.8,118.4,107.4,113.318,4.19372],
#			[83.4,118.8,107.6,113.97,4.19372],
#			[82.8,118.2,108,113.58,4.19372],
#			[83,118,107.2,113.282,4.19372],
#			[84,119.4,108.4,114.612,4.19372],
#			[83.8,118.4,108,113.794,4.19372],
#			[83.6,118,107.8,113.45,4.19372],
#			[53.8,118.8,106,111.562,4.21392],
#			[53.8,120,106.4,112.51,4.21392],
#			[54.4,121.6,107.8,113.998,4.21392],
#			[55.2,121.4,108.4,114.036,4.21392],
#			[54.6,121,108,113.622,4.21392],
#			[55.2,121.4,108.4,114.036,4.21392],
#			[55.4,121.4,107.4,113.84,4.21392],
#			[54.6,121,107.4,113.496,4.21392],
#			[55,120.8,108.4,113.59,4.21392],
#			[55.4,121,108,113.678,4.21392],
#			[99.6,106.8,102.4,105.372,5.9606],
#			[99.2,107.4,102,105.692,5.9606],
#			[98.8,107.2,102.2,105.562,5.9606],
#			[100,108.4,103.6,106.804,5.9606],
#			[98.8,107.6,102,105.808,5.9606],
#			[99.6,107.6,102.6,105.99,5.9606],
#			[99.2,107.8,103.6,106.316,5.9606],
#			[99.2,107.6,102.8,106.004,5.9606],
#			[98.8,107.6,102.8,105.976,5.9606],
#			[98.6,107.4,102.6,105.776,5.9606],
#			[50.2,122.6,106.6,114.172,4.47978],
#			[51.4,124,108.4,115.642,4.47978],
#			[51.4,123.2,108.6,115.108,4.47978],
#			[50.8,123.8,108.2,115.414,4.47978],
#			[50.6,123.4,108.4,115.154,4.47978],
#			[50.6,123,107,114.572,4.47978],
#			[50.4,123,107.4,114.642,4.47978],
#			[50.8,124,108,115.516,4.47978],
#			[51.4,123.2,107.4,114.856,4.47978],
#			[50.8,123,107.4,114.67,4.47978]
#		])
	
